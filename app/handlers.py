import os
import asyncio
import aiomysql
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.requests import Database

import app.keyboards as kb



PSYCHANNEL_ID = '-4517186238'
CHANNEL_ID = '-4532864138'
BOT_ID = '7439964712'
bot = os.getenv('TOKEN_ID')

#MAX_FILE_SIZE = 50 * 1024 * 1024  # 50–º–±

router = Router()

loop = asyncio.get_event_loop()

class Register(StatesGroup):
    name = State()
    age = State()
    gender = State()
    diseases = State()
    psy_gender = State()
    first_time = State()
    info = State()
    issue = State()
    experience = State()
    number = State()


class RegisterPsy(StatesGroup):
    psy_name = State()
    psy_age = State()
    psy_gender = State()
    psy_graduation = State()
    psy_language = State()
    psy_how_find = State()
    psy_info = State()
    psy_how_work = State()
    psy_diploma = State()
    psy_number = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å', reply_markup=kb.role)


# –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
@router.message(F.text == 'üåê–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫')
async def language(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=kb.language)


@router.callback_query(F.data == 'russian')
async def russian(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫')


# –ü–∞–Ω–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞

@router.message(F.text == 'üß†–ü—Å–∏—Ö–æ–ª–æ–≥')
async def register(message: Message):
    db = Database()
    if not await db.get_psy(message.from_user.id):
        await message.answer(
            f'–°—Ç–∞–Ω–æ–≤—è—Å—å –Ω–∞—à–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—Å–∏—è\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n\n–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\nhttps://telegra.ph/Politika-v-otnoshenii-obrabotki-personalnyh-dannyh-09-06-6\n\n–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä–∞:\nhttps://telegra.ph/PUBLICHNAYA-OFERTA-09-06-2')
        await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=kb.continue_btn)
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=kb.psy_keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞

@router.message(F.text == 'üìù–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def register_psy(message: Message, state: FSMContext):
    await state.set_state(RegisterPsy.psy_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', reply_markup=ReplyKeyboardRemove())


@router.message(RegisterPsy.psy_name)
async def register_psy_name(message: Message, state: FSMContext):
    await state.update_data(psy_name=message.text)
    await state.set_state(RegisterPsy.psy_age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')


@router.message(RegisterPsy.psy_age)
async def register_psy_age(message: Message, state: FSMContext):
    await state.update_data(psy_age=message.text)
    await state.set_state(RegisterPsy.psy_gender)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=await kb.inline_gender())


@router.message(RegisterPsy.psy_gender)
async def register_psy_gender(message: Message, state: FSMContext):
    await state.update_data(psy_gender=message.text)
    await state.set_state(RegisterPsy.psy_graduation)
    await message.answer('–ö–∞–∫–æ–µ –µ—Å—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?(–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)',
                         reply_markup=await kb.inline_graduation())


@router.message(RegisterPsy.psy_graduation)
async def register_psy_graduation(message: Message, state: FSMContext):
    await state.update_data(psy_graduation=message.text)
    await state.set_state(RegisterPsy.psy_language)
    await message.answer('–ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=await kb.inline_language())


@router.message(RegisterPsy.psy_language)
async def register_pay_language(message: Message, state: FSMContext):
    await state.update_data(psy_language=message.text)
    await state.set_state(RegisterPsy.psy_how_find)
    await message.answer('–ö–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?(–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)', reply_markup=await kb.inline_howFind())


@router.message(RegisterPsy.psy_how_find)
async def register_psy_how_find(message: Message, state: FSMContext):
    await state.update_data(psy_how_find=message.text)
    await state.set_state(RegisterPsy.psy_info)
    await message.answer('–ö—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ', reply_markup=ReplyKeyboardRemove())


@router.message(RegisterPsy.psy_info)
async def register_psy_info(message: Message, state: FSMContext):
    await state.update_data(psy_info=message.text)
    await state.set_state(RegisterPsy.psy_how_work)
    await message.answer('–ö–∞–∫–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º/–ø–æ–¥—Ö–æ–¥–æ–º –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?')


@router.message(RegisterPsy.psy_how_work)
async def register_psy_how_work(message: Message, state: FSMContext):
    await state.update_data(psy_how_work=message.text)
    await state.set_state(RegisterPsy.psy_diploma)
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç')


@router.message(RegisterPsy.psy_diploma)
async def register_psy_diploma(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(psy_diploma=file_id)
    await message.bot.send_photo(chat_id=os.getenv('PSYCHANNEL_ID'), photo=file_id)
    await state.set_state(RegisterPsy.psy_number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

@router.message(RegisterPsy.psy_number)
async def register_psy_number(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(psy_number=message.contact.phone_number)
    db = Database()
    data = await state.get_data()
    await bot.send_message(chat_id=PSYCHANNEL_ID,
                           text=f'–ò–º—è: {data["psy_name"]}\n–í–æ–∑—Ä–∞—Å—Ç: {data["psy_age"]}\n'
                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["psy_number"]}\n–ü–æ–ª: {data["psy_gender"]}\n'
                                f'–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data["psy_graduation"]}\n–Ø–∑—ã–∫: {data["psy_language"]}\n'
                                f' –ø—Å–∏—Ö–æ–ª–æ–≥–µ: {data["psy_info"]}\n–ö–∞–∫ —É–∑–Ω–∞–ª–∏: {data["psy_how_find"]}\n'
                                f'–ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã: {data["psy_how_work"]}',
                                reply_markup=kb.approve_button)
    await db.add_psy(message.from_user.id, data['psy_name'], data['psy_age'], data['psy_gender'],
                     data['psy_graduation'], data['psy_language'], data['psy_how_find'],
                     data['psy_info'], data['psy_how_work'], data['psy_number'])
    await state.clear()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞

# @router.message(F.text == '–ë–ª–∞–≥–æ–¥–æ—Ä–∏–º –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è')
# async def notify_admin(message: Message, state: FSMContext):
#    await state.update_data(user_message=message.text)
#    await bot.send_message(PSYCHANNEL_ID, '–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É',reply_markup=kb.approve_button)

# @router.callback_query(F.data == 'approve')
# async def processed_button_press(callback_query: CallbackQuery):
#    await callback_query.answer('–î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω')

#–ö—É—Ä—Å—ã

@router.message(F.text == 'üéì–ö—É—Ä—Å—ã')
async def courses(message: Message):
    await message.answer('–ö—É—Ä—Å—ã', reply_markup=kb.course_btn)

#–í—ã–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç–æ–≤
async def connect_to_db():
    conn = await aiomysql.connect(host=os.getenv('DB_HOST'),
                           user=os.getenv('DB_USER'),
                           password=os.getenv('DB_PASSWORD'),
                           db=os.getenv('DB_NAME'),
                           loop=loop)
    return conn

async def get_db_data():
    conn = await connect_to_db()
    cur = await conn.cursor()
    await cur.execute("SELECT id, tg_id, name, age, gender, diseases, psy_gender,"
                      " first_time, info, issue, experience, number FROM users WHERE approve = 0")
    result = await cur.fetchall()
    await cur.close()
    conn.close()
    return result

@router.message(F.text == 'üë•–ö–ª–∏–µ–Ω—Ç—ã')
async def show_clients(message: Message):
    db_data = await get_db_data()
    for row in db_data:
        id, tg_id, name, age, gender, diseases, psy_gender, first_time, info, issue, experience, number = row

        await message.answer(f'id: {id}\ntg_id: {tg_id}\nname: {name}\nage: {age}\ngender: {gender}\n'
                             f'diseases: {diseases}\npsy_gender: {psy_gender}\n–ü–µ—Ä–≤—ã–π —Ä–∞–∑: {first_time}\n'
                             f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}\n–ü—Ä–∏—á–∏–Ω–∞: {issue}\n–û–ø—ã—Ç: {experience}\n'
                             f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}', reply_markup=kb.approve_button)






#–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

@router.message(F.text == 'üìû–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
async def courses(message: Message):
    await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?', reply_markup=kb.manager_btn)

# –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞

@router.message(F.text == 'ü§î–ö–ª–∏–µ–Ω—Ç')
async def client(message: Message, state: FSMContext):
    db = Database()
    if not await db.get_user(message.from_user.id):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n\n'
                             '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ. –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ Telegramm –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–≤—è–∑–∏. –í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –≥—Ä–∞–º–æ—Ç–Ω—ã—Ö —É—Å–ª—É–≥')
        await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=kb.continue_btn_client)
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=kb.main)


@router.message(F.text == 'üìã–ü—Ä–∞–≤–∏–ª–∞')
async def rules(message: Message):
    await message.answer('–£—Å–ª–æ–≤–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–î–æ—Å—Ç—É–ø–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è>\n'
                         '1. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n- 50000 —Å—É–º –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é.\n'
                         '2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π:\n- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π—Ç–∏ 10 —Å–µ—Å—Å–∏–π.\n'
                         '3. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å: \n- 50000 —Å—É–º (–Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π).\n'
                         '4. –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:\n - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ 10 —Å–µ—Å—Å–∏–π —Å –Ω–∞—á–∏–Ω–∞—é—â–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n'
                         '- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º, –≥–æ—Ç–æ–≤—ã–º –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ 10 —Å–µ—Å—Å–∏–π —Å—Ä–∞–∑—É.\n - –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n'
                         '5. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n - 50-60 –º–∏–Ω—É—Ç –∫–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è.\n'
                         '6. –§–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–π:\n - –°–µ—Å—Å–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω.')


@router.message(F.text == 'ü§ñ–ò–ò –ø—Å–∏—Ö–æ–ª–æ–≥')
async def rules(message: Message):
    await message.answer('–ò–ò –ø—Å–∏—Ö–æ–ª–æ–≥ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

@router.message(F.text == 'üìù–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')
async def register_psy(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', reply_markup=ReplyKeyboardRemove())


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')


@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Register.gender)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=await kb.inline_gender())


@router.message(Register.gender)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await state.set_state(Register.diseases)
    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ-–Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?(–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)',
        reply_markup=await kb.inline_choice())


@router.message(Register.diseases)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(diseases=message.text)
    await state.set_state(Register.psy_gender)
    await message.answer('–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', reply_markup=await kb.inline_psyGender())


@router.message(Register.psy_gender)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(psy_gender=message.text)
    await state.set_state(Register.first_time)
    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –≤—ã —Ä–∞–Ω–µ–µ —É—Å–ª—É–≥–∞–º–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞?', reply_markup=await kb.inline_choice())


@router.message(Register.first_time)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(first_time=message.text)
    await state.set_state(Register.info)
    await message.answer(
        '–ö—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ (—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π, —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è)',
        reply_markup=ReplyKeyboardRemove())


@router.message(Register.info)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(info=message.text)
    await state.set_state(Register.issue)
    await message.answer('–û—Å–Ω–æ–≤–Ω–∞—è —Å—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞/–ø—Ä–æ–±–ª–µ–º—ã')


@router.message(Register.issue)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(issue=message.text)
    await state.set_state(Register.experience)
    await message.answer('–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, —Ç–æ –∫–∞–∫–æ–π –æ–ø—ã—Ç –≤—ã –ø–æ–ª—É—á–∏–ª–∏')


@router.message(Register.experience)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(Register.number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)


@router.message(Register.number, F.contact)
async def register_number(message: Message, bot: Bot, state: FSMContext):
    db = Database()
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer('–ë–ª–∞–≥–æ–¥–æ—Ä–∏–º –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è\n\n'
                         '*–ï—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ —Å –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∞–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è\n'
                         '*–ê–Ω–∫–µ—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n'
                         '*–ü—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–∏ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –±–∞–Ω')
    await bot.send_message(chat_id=CHANNEL_ID,
                           text=f'–ò–º—è: {data["name"]}\n–í–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["number"]}\n–ü–æ–ª: {data["gender"]}\n–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {data["diseases"]}\n–ü–æ–ª –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {data["psy_gender"]}\n–ü–µ—Ä–≤—ã–π —Ä–∞–∑?: {data["first_time"]}\n–û –∫–ª–∏–µ–Ω—Ç–µ: {data["info"]}\n–ü—Ä–æ–±–ª–µ–º–∞: {data["issue"]}\n–û–ø—ã—Ç: {data["experience"]}')
    await db.add_user(message.from_user.id, data['name'], data['age'], data['gender'],
                      data['diseases'], data['psy_gender'], data['first_time'],
                      data['info'], data['issue'], data['experience'], data['number'])
    await state.clear()


